{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielliau/Documents/login-react/src/components/Action.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport { Form, Button, Card, Alert } from \"react-bootstrap\"; // import { useAuth } from \"../contexts/AuthContext\";\n// import { Link, useHistory } from \"react-router-dom\";\n\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/analytics\";\nimport { auth } from \"../firebase\";\nimport { useCollection } from \"react-firebase-hooks/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst firestore = firebase.firestore();\nconst analytics = firebase.analytics();\nconst messagesRef = firestore.collection(\"messages\");\nconst query = messagesRef.orderBy(\"createdAt\").limit(25);\nconst [messages] = useCollection(query, {\n  idField: \"id\"\n});\n\nfunction encryption() {}\n\nexport default function Action() {\n  _s();\n\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const NodeRSA = require(\"node-rsa\");\n\n  const key = new NodeRSA({\n    b: 512\n  });\n  const text = \"My name is Gabriel\";\n  const encrypted = key.encrypt(text, \"base64\"); // console.log(\"encrypted: \", encrypted);\n\n  const decrypted = key.decrypt(encrypted, \"utf8\"); // console.log(\"decrypted: \", decrypted);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    try {\n      setLoading(true);\n    } catch {\n      setError(\"Failed\");\n    }\n\n    setLoading(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-center mb-4\",\n          children: \"Encrypt\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n          variant: \"danger\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            id: \"text\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            disabled: loading,\n            className: \"w-100\",\n            type: \"submit\",\n            children: \"Encrypt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Action, \"u1pg92tKOenl7N3Osj0BWdaWuu0=\");\n\n_c = Action;\n\nvar _c;\n\n$RefreshReg$(_c, \"Action\");","map":{"version":3,"sources":["/Users/gabrielliau/Documents/login-react/src/components/Action.js"],"names":["React","useRef","useState","Form","Button","Card","Alert","firebase","auth","useCollection","firestore","analytics","messagesRef","collection","query","orderBy","limit","messages","idField","encryption","Action","error","setError","loading","setLoading","NodeRSA","require","key","b","text","encrypted","encrypt","decrypted","decrypt","handleSubmit","e","preventDefault"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { Form, Button, Card, Alert } from \"react-bootstrap\";\n// import { useAuth } from \"../contexts/AuthContext\";\n// import { Link, useHistory } from \"react-router-dom\";\n\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/analytics\";\nimport { auth } from \"../firebase\";\nimport { useCollection } from \"react-firebase-hooks/firestore\";\n\nconst firestore = firebase.firestore();\nconst analytics = firebase.analytics();\n\nconst messagesRef = firestore.collection(\"messages\");\nconst query = messagesRef.orderBy(\"createdAt\").limit(25);\n\nconst [messages] = useCollection(query, { idField: \"id\" });\n\nfunction encryption() {}\n\nexport default function Action() {\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const NodeRSA = require(\"node-rsa\");\n  const key = new NodeRSA({ b: 512 });\n\n  const text = \"My name is Gabriel\";\n  const encrypted = key.encrypt(text, \"base64\");\n  // console.log(\"encrypted: \", encrypted);\n  const decrypted = key.decrypt(encrypted, \"utf8\");\n  // console.log(\"decrypted: \", decrypted);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    try {\n      setLoading(true);\n    } catch {\n      setError(\"Failed\");\n    }\n\n    setLoading(false);\n  }\n\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h2 className=\"text-center mb-4\">Encrypt</h2>\n          {error && <Alert variant=\"danger\">{error}</Alert>}\n          <Form onSubmit={handleSubmit}>\n            <Form.Group id=\"text\">\n              <Form.Label>Text</Form.Label>\n              <Form.Control type=\"text\" required />\n            </Form.Group>\n\n            <Button disabled={loading} className=\"w-100\" type=\"submit\">\n              Encrypt\n            </Button>\n          </Form>\n        </Card.Body>\n      </Card>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}